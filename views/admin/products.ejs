<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Products</title>
    <style>
        .flex-container {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: flex-start;
            align-content: flex-start;
            align-items: flex-start;

        }

        .flex-item {
            flex: 0 0 auto;
            margin: 10px;
            width:200px;
            max-width: 200px;
            height: 200px;
            max-height: 200px;
            border:1px solid;
            border-radius: 5px;
            text-align:center;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        .flex-item .upper{
            display:flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .pagination{
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: flex-start;
            align-content: flex-start;
            align-items: flex-start;
        }
        .pagination button {
            color: black;
            float: left;
            padding: 8px 16px;
            text-decoration: none;
            border-radius: 5px;
            cursor:pointer;
        }
        .pagination button.active {
            color:white;
            background-color: #333333;
        }
        .operationButtonsContainer{
            height:20px;
            text-align: center;
            margin-bottom:5px;
        }

        .operationButtonsContainer button:hover{
            cursor:pointer;
            color: white;
            background-color: #333333;
        }
    </style>
    <style>
        body {font-family: Arial, Helvetica, sans-serif;}

        /* The Modal (background) */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            padding-top: 100px; /* Location of the box */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 500px;
            height: 500px;
        }

        /* The Close Button */
        .close {
            color: #aaaaaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
    </style>

</head>
<body>
<%- include('../navmenu.ejs',{pagePath:pagePath}) %>
<div id="myModal" class="modal">

    <!-- Modal content -->
    <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Product Edit/Update</h3>
        <form action="productUpdate"
              id="productUpdateForm"
              name="productUpdateForm"
              method="post"
              enctype="multipart/form-data"
              style="margin:auto;width:400px;display:flex;flex-direction: column;flex-wrap: wrap"
        >
            <div>Product name: <input type="text" name="productName" ></div>
            <div>Product price: <input type='number' name="productPrice" step='0.01' value='0.00' placeholder='0.00'></div>
            <div>Product image: <input type="file" name="productImage"  id="productImage" ></div>
            <div>Product description: <input type="textarea" name="productDescription" ></div>
            <div><button type="submit" style="width:250px">Update Product</button></div>
            <div id="message"></div>
        </form>
    </div>

</div>
<div id="productList" class="flex-container">
    Product list is loading...

</div>
<section class="pagination">
    loading...
</section>
<script>
    const texsBurger={};
    texsBurger.productListRequest = async (pageNumber)=>{
        pageNumber = Number(pageNumber) || 1;
        const pLR = await fetch('/products/page/'+pageNumber,{
            method:'GET',
            headers:{
                'Accept':'application/json, text/plain, */*',
                'Authorization' : localStorage.getItem('token')
            }
        })
            .then(result=>{
                return result.json()
            })
            .then(resData=>{
                document.getElementById('productList').innerHTML='';
                resData.products.forEach(oProduct=>{
                    document.getElementById('productList').innerHTML+=`
<div class="flex-item">
<div class="upper">
${oProduct.productName}
<img src="${oProduct.productImage.replace('public','')}" alt="" style="max-height: 150px; max-width: 150px;">
</div>
<div class="operationButtonsContainer" data-pid="${oProduct._id}">
<button data-act="edit">EDIT</button>
<button data-act="delete">DELETE</button>
</div>
</div>
`;
                })
                let totalProductCount = resData.totalProductCount;
                let itemsPerPage = resData.itemsPerPage;
                let currentPage = resData.currentPage;
                let calculatedPageCount = resData.maxPageNumber
                let pageNo;
                document.querySelector('.pagination').innerHTML='';
                for(pageNo=1; pageNo<=calculatedPageCount; pageNo++){
                    let buttonClass='';
                    if(parseInt(currentPage)===pageNo){
                        buttonClass='class="active"'
                    }
                    document.querySelector('.pagination').innerHTML+=`<button type="button" ${buttonClass} onclick="texsBurger.productListRequest(${pageNo})">${pageNo}</button>`
                }

            })
            .then(done=>{
                document.querySelectorAll('.operationButtonsContainer').forEach(oBC=>{
                    let pId = oBC.dataset.pid;
                    oBC.querySelectorAll('button').forEach(btn=>{
                            switch(btn.dataset.act){
                                case 'edit':
                                    btn.addEventListener('click',()=>{
                                        texsBurger.editProduct(pId);
                                    });
                                    break;
                                case 'delete':
                                    btn.addEventListener('click',()=>{
                                        texsBurger.deleteProduct(pId)
                                    });

                            }
                    })
                })
            })
            .catch(err=>{
                console.log(err)
            })
    }

    window.addEventListener('load',texsBurger.productListRequest);
    window.addEventListener('click',(event)=>{
        if (event.target.id === 'myModal') {
            document.getElementById("myModal").style.display = "none";
        }
    });

    texsBurger.editProduct= (pid)=>{
        const modal = document.getElementById("myModal");
        const closeSpan = document.getElementsByClassName("close")[0];
        console.log(`${pid} product will be edited.`)
        modal.style.display = "block";
        closeSpan.addEventListener('click',(pid)=>{
            modal.style.display = "none";
            texsBurger.editProductForm(pid);
        })
    }

    texsBurger.deleteProduct= (pid)=>{
        console.log(`${pid} product will be deleted.`);
        document.querySelector("[data-pid='"+pid+"']").parentNode.style.backgroundColor='pink';
        setTimeout(()=>{
            let conf = confirm(`Do you really wanna delete the item ${pid}?`);
            if(!conf){
                document.querySelector("[data-pid='"+pid+"']").parentNode.style.backgroundColor='white';
            }else{
                let deleteRequest = fetch('/admin/product/'+pid,{
                    method:'DELETE',
                    headers:{
                        Accept:'application/json, text/plain, */*',
                        Authorization:'Bearer '+ localStorage.getItem('token')
                    }
                })
                .then(response=>{
                    console.log(response);
                    if(response.status===200){
                        document.querySelector("[data-pid='"+pid+"']").parentNode.remove()

                    }
                    return response.json()
                })
                .then(resData=>{
                    console.log(resData);
                })
            }
        },1000)
    }

    //---------
    texsBurger.editProductForm = (pid)=>{
        //product data

        //form submit processes
        document.querySelector('#productUpdateForm').addEventListener('submit', async (event)=>{
            event.preventDefault();
            let productUpdateForm = document.getElementById('productUpdateForm');
            let formData = new FormData(productUpdateForm);
            let updateProductRequest = await fetch(productUpdateForm.action,{
                method:'POST',
                body:formData,
                headers:{
                    Authorization:'Bearer '+ localStorage.getItem('token')
                }
            })
                .then(res=>{
                    return res.json()
                })
                .then(res=>{
                    document.getElementById('message').innerHTML = res.message;
                    setTimeout(()=>{
                        document.getElementById('message').innerHTML ='';
                    },3000)
                    productUpdateForm.reset();
                })
                .catch(err=>{
                    console.log(err)
                })
        })
    }

</script>
</body>
</html>
